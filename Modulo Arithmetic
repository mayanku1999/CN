Number Of Balanced BTs

Given an integer h, find the possible number of balanced binary trees of height h. You just need to return the count of possible binary trees which are balanced.
This number can be huge, so return output modulus 10^9 + 7.
Write a simple recursive solution.
Input Format :
Integer h
Output Format :
Count % 10^9 + 7
Input Constraints :
1 <= h <= 40
Sample Input 1:
3
Sample Output 1:
15
Sample Input 2:
4
Sample Output 2:
315











// ----------------------------------CN solution -------------------------
#include <cmath> int balancedBTs(int h) { if(h <= 1) { return 1; } int mod = (int) (pow(10, 9)) + 7; int x = balancedBTs(h - 1); int y = balancedBTs(h - 2); int temp1 = (int)(((long)(x)*x) % mod); int temp2 = (int)((2* (long)(x) * y) % mod); int ans = (temp1 + temp2) % mod; return ans; }


//---------------------------My code----------------------------------
#include <iostream>
#include "Solution.h"
using namespace std;
#include <cmath>

int main() {
    int h;
    cin >> h;
    int ans = balancedBTs(h);
    cout << ans << endl;
}

const int m=1000000007;
int case1(int h){
    if(h==0 || h==1)return 1;
    long int x=case1(h-1);
    long int y=case1(h-2);
    return  (( (((x%m)*(x%m))%m) + (((2*x)%m * (y%m))%m))%m);
}

int balancedBTs(int h) {
  /* Don't write main().
     Don't read input, it is passed as function argument.
     Return the output and donâ€™t print it.
  */
    return case1(h);
    
}
